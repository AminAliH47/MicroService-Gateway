openapi: 3.0.3
info:
  title: Gateway service APIs Documentation
  version: 1.0.0
paths:
  /:
    get:
      operationId: root_retrieve
      description: |-
        Show List of all users

        :param request:
        :return: List of all users
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
  /{id}/:
    get:
      operationId: root_retrieve_2
      description: |-
        Get PK from URL then returns the user whose ID is equal to PK

        :param pk: user Primary Key
        :return: User object
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
  /auth/login/:
    post:
      operationId: auth_login_create
      description: |-
        Login registered user with username and password

        :return: User data and JWT refresh and access token
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserLogin'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserLogin'
        required: true
      security:
      - jwtAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserLogin'
          description: ''
  /auth/token/:
    post:
      operationId: auth_token_create
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenObtainPair'
          description: ''
  /auth/token/refresh/:
    post:
      operationId: auth_token_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
  /create/:
    post:
      operationId: create_create
      description: |-
        Get data from client and pass it to the Users Service
        then create new user

        :param request
        :return: Created User data

        ---
            {
              "username": "string",
              "first_name": "string",
              "last_name": "string",
              "email": "string",
              "password": "string"
            }
      tags:
      - create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      security:
      - jwtAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
  /delete/{id}/:
    delete:
      operationId: delete_destroy
      description: |-
        Get primary key from URL and pass it to the Users Service,
        then delete user with passed PK (Primary Key)

        :param request
        :param pk: user primary key
        :return: Deleted User
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - delete
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /update/{id}/:
    put:
      operationId: update_update
      description: |-
        Get data from client and pass it to the Users Service
        then update user with passed PK (Primary Key)

        :param request
        :param pk: user primary key
        :return: Updated User data

        ---
            {
              "username": "string",
              "first_name": "string",
              "last_name": "string",
              "email": "string",
              "password": "string"
            }
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
components:
  schemas:
    TokenObtainPair:
      type: object
      properties:
        username:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          readOnly: true
      required:
      - access
      - password
      - refresh
      - username
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          writeOnly: true
      required:
      - access
      - refresh
    User:
      type: object
      description: User serializer to validate user data
      properties:
        username:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
      required:
      - password
      - username
    UserLogin:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
      required:
      - password
      - username
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
